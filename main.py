import logging
import pandas as pd
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import re
import os
import json
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_LANGUAGE_FILE = "user_languages.json"

# –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
LANGUAGES = {
    'ru': {
        'welcome': 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        'search_by_name': 'üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏',
        'show_group': 'üë• –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É',
        'change_language': 'üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
        'statistics': 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'help': '‚ùì –ü–æ–º–æ—â—å',
        'enter_name': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:',
        'choose_group': '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:',
        'student_found': '‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç:',
        'students_in_group': 'üë• –°—Ç—É–¥–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã {group}:',
        'no_students_found': '‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        'exam_passed': '‚úÖ –≠–∫–∑–∞–º–µ–Ω —Å–¥–∞–Ω',
        'exam_failed': '‚ùå –≠–∫–∑–∞–º–µ–Ω –Ω–µ —Å–¥–∞–Ω',
        'phone': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω',
        'nickname': 'üë§ –ù–∏–∫–Ω–µ–π–º',
        'certificates': 'üèÜ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
        'back_to_menu': 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'language_changed': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π',
        'help_text': '''
ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ - –Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
üë• –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã  
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏

–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞.
        ''',
        'total_students': '–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {count}',
        'passed_exam_count': '–°–¥–∞–ª–∏ —ç–∫–∑–∞–º–µ–Ω: {count}',
        'failed_exam_count': '–ù–µ —Å–¥–∞–ª–∏ —ç–∫–∑–∞–º–µ–Ω: {count}',
        'group': '–ì—Ä—É–ø–ø–∞',
        'status': '–°—Ç–∞—Ç—É—Å',
        'select_language': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'has_certificate': '–µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
        'no_certificate': '–Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'
    },
    'uz': {
        'welcome': 'üëã Talabalar qidiruv botiga xush kelibsiz!\n\nAmalni tanlang:',
        'search_by_name': 'üîç Ism bo\'yicha qidirish',
        'show_group': 'üë• Guruhni ko\'rsatish',
        'change_language': 'üåê Tilni o\'zgartirish',
        'statistics': 'üìä Statistika',
        'help': '‚ùì Yordam',
        'enter_name': 'Talabaning ism va familiyasini kiriting:',
        'choose_group': 'Guruhni tanlang:',
        'student_found': '‚úÖ Talaba topildi:',
        'students_in_group': 'üë• {group} guruh talabalari:',
        'no_students_found': '‚ùå Talabalar topilmadi',
        'exam_passed': '‚úÖ Imtihon topshirildi',
        'exam_failed': '‚ùå Imtihon topshirilmadi',
        'phone': 'üì± Telefon',
        'nickname': 'üë§ Taxallus',
        'certificates': 'üèÜ Sertifikatlar',
        'back_to_menu': 'üîô Asosiy menyu',
        'language_changed': '‚úÖ Til o\'zbekchaga o\'zgartirildi',
        'help_text': '''
ü§ñ Botdan foydalanish bo\'yicha ko\'rsatma:

üîç Ism bo\'yicha qidirish - talabani ism va familiya bo\'yicha topish
üë• Guruhni ko\'rsatish - tanlangan guruhning barcha talabalarini ko\'rsatish
üìä Statistika - guruhlar bo\'yicha umumiy statistika
üåê Tilni o\'zgartirish - tillar o\'rtasida almashtirish

Qidirish uchun talabaning ism va familiyasini kiriting.
        ''',
        'total_students': 'Jami talabalar: {count}',
        'passed_exam_count': 'Imtihon topshirganlar: {count}',
        'failed_exam_count': 'Imtihon topshirmaganlar: {count}',
        'group': 'Guruh',
        'status': 'Holat',
        'select_language': 'Tilni tanlang:',
        'has_certificate': 'sertifikat bor',
        'no_certificate': 'sertifikat yo\'q'
    },
    'en': {
        'welcome': 'üëã Welcome to the Student Search Bot!\n\nChoose an action:',
        'search_by_name': 'üîç Search by name',
        'show_group': 'üë• Show group',
        'change_language': 'üåê Change language',
        'statistics': 'üìä Statistics',
        'help': '‚ùì Help',
        'enter_name': 'Enter student name and surname:',
        'choose_group': 'Choose a group:',
        'student_found': '‚úÖ Student found:',
        'students_in_group': 'üë• Students in group {group}:',
        'no_students_found': '‚ùå No students found',
        'exam_passed': '‚úÖ Exam passed',
        'exam_failed': '‚ùå Exam failed',
        'phone': 'üì± Phone',
        'nickname': 'üë§ Nickname',
        'certificates': 'üèÜ Certificates',
        'back_to_menu': 'üîô Main menu',
        'language_changed': '‚úÖ Language changed to English',
        'help_text': '''
ü§ñ Bot usage instructions:

üîç Search by name - find a student by name and surname
üë• Show group - show all students in the selected group
üìä Statistics - general statistics by groups
üåê Change language - switch between languages

To search, simply enter the student's name and surname.
        ''',
        'total_students': 'Total students: {count}',
        'passed_exam_count': 'Passed exam: {count}',
        'failed_exam_count': 'Failed exam: {count}',
        'group': 'Group',
        'status': 'Status',
        'select_language': 'Select language:',
        'has_certificate': 'has certificate',
        'no_certificate': 'no certificate'
    }
}

class StudentBot:
    def __init__(self):
        self.students_data = {}
        self.user_languages = self.load_user_languages()
        self.load_data()
    
    def load_user_languages(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(USER_LANGUAGE_FILE):
            try:
                with open(USER_LANGUAGE_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {}
    
    def save_user_languages(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(USER_LANGUAGE_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.user_languages, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def has_certificate(self, row: pd.Series) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
        cert_columns = []
        
        for col in row.index:
            col_lower = str(col).lower()
            if any(keyword in col_lower for keyword in ['sertifikat', 'certificate', 'cert']):
                cert_columns.append(col)
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
        for col in cert_columns:
            value = row[col]
            if pd.notna(value):
                value_str = str(value).strip()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ "–ø—É—Å—Ç—ã–º–∏" –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                if value_str and value_str.lower() not in ['', 'nan', 'none', 'null', '-', 'n/a']:
                    return True
        
        return False
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤"""
        urls = {
            'D1': 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/group_d1-PV7nQS7IQwFS9e2ps8nTKOBoGIv2br.csv',
            'D2': 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/group_d2-WQjbXhJy4zuB1uPnTEYsP27kTALVq0.csv',
            'D3': 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/group_d3-uPiNK14aokZuaaFV8DjGlyE94Qkkl9.csv',
            'D4': 'https://hebbkx1anhila5yf.public.blob.vercel-storage.com/group_d4-ln5jYKnT5nlI7UQxO2xBBdXrvtMHV9.csv'
        }
        
        for group, url in urls.items():
            try:
                response = requests.get(url, timeout=30)
                content = response.content.decode('utf-8', errors='ignore')
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = f'temp_{group.lower()}.csv'
                with open(temp_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —á—Ç–µ–Ω–∏—è CSV
                df = None
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;
                try:
                    df = pd.read_csv(temp_file, delimiter=';')
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {group} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ';'")
                except:
                    pass
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å –∑–∞–ø—è—Ç–æ–π
                if df is None or df.empty:
                    try:
                        df = pd.read_csv(temp_file, delimiter=',')
                        logger.info(f"–ì—Ä—É–ø–ø–∞ {group} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ','")
                    except:
                        pass
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                if df is None or df.empty:
                    try:
                        df = pd.read_csv(temp_file)
                        logger.info(f"–ì—Ä—É–ø–ø–∞ {group} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—É {group}: {e}")
                        continue
                
                if df is not None and not df.empty:
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    df = df.dropna(how='all')  # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {group}: –∫–æ–ª–æ–Ω–∫–∏ = {list(df.columns)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    cert_count = 0
                    for _, row in df.iterrows():
                        if self.has_certificate(row):
                            cert_count += 1
                    
                    logger.info(f"–ì—Ä—É–ø–ø–∞ {group}: {len(df)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, {cert_count} —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏")
                    
                    self.students_data[group] = df
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file):
                    os.remove(temp_file)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø—ã {group}: {e}")
    
    def get_user_language(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        return self.user_languages.get(user_id_str, 'ru')
    
    def set_user_language(self, user_id: int, language: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        self.user_languages[user_id_str] = language
        self.save_user_languages()
    
    def get_text(self, user_id: int, key: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        lang = self.get_user_language(user_id)
        text = LANGUAGES[lang].get(key, key)
        if kwargs:
            text = text.format(**kwargs)
        return text
    
    def create_main_menu(self, user_id: int) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton(self.get_text(user_id, 'search_by_name'))],
            [KeyboardButton(self.get_text(user_id, 'show_group'))],
            [KeyboardButton(self.get_text(user_id, 'statistics')), 
             KeyboardButton(self.get_text(user_id, 'help'))],
            [KeyboardButton(self.get_text(user_id, 'change_language'))]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    def search_student(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏"""
        results = []
        query_lower = query.lower()
        
        for group, df in self.students_data.items():
            if df.empty:
                continue
                
            # –ò—â–µ–º –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º–µ–Ω–∞
            for index, row in df.iterrows():
                row_text = ' '.join(str(val) for val in row.values if pd.notna(val))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                if query_lower in row_text.lower():
                    student_info = {
                        'group': group,
                        'data': row,
                        'index': index
                    }
                    results.append(student_info)
        
        return results
    
    def format_student_info(self, student: Dict, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
        row = student['data']
        group = student['group']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        has_cert = self.has_certificate(row)
        exam_status = self.get_text(user_id, 'exam_passed') if has_cert else self.get_text(user_id, 'exam_failed')
        
        # –ü–æ–ª—É—á–∞–µ–º –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞
        name = self.get_student_name(row)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        info = f"‚îå{'‚îÄ' * 35}‚îê\n"
        info += f"‚îÇ üë§ **{name}**\n"
        info += f"‚îÇ üè´ {self.get_text(user_id, 'group')}: **{group}**\n"
        info += f"‚îÇ üìã {self.get_text(user_id, 'status')}: {exam_status}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        phone = self.get_student_phone(row)
        if phone:
            info += f"‚îÇ {self.get_text(user_id, 'phone')}: {phone}\n"
        
        nickname = self.get_student_nickname(row)
        if nickname:
            info += f"‚îÇ {self.get_text(user_id, 'nickname')}: {nickname}\n"
        
        certificates = self.get_student_certificates(row)
        if certificates:
            info += f"‚îÇ {self.get_text(user_id, 'certificates')}: {certificates}\n"
        
        info += f"‚îî{'‚îÄ' * 35}‚îò"
        
        return info
    
    def get_student_name(self, row: pd.Series) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏
        name_columns = ['F.I.Sh', '–§–ò–û', 'Name', '–ò–º—è', 'Full Name']
        
        for col in name_columns:
            if col in row and pd.notna(row[col]):
                return str(row[col]).strip()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–Ω–∫–∏, –±–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é –∫–æ–ª–æ–Ω–∫—É (–æ–±—ã—á–Ω–æ —Ç–∞–º –∏–º—è)
        if len(row) > 1 and pd.notna(row.iloc[1]):
            return str(row.iloc[1]).strip()
        
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    def get_student_phone(self, row: pd.Series) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        phone_columns = ['Telefon nomeri', 'Phone', '–¢–µ–ª–µ—Ñ–æ–Ω']
        
        for col in phone_columns:
            if col in row and pd.notna(row[col]):
                phone = str(row[col]).strip()
                if phone and phone != '':
                    return phone
        
        return ""
    
    def get_student_nickname(self, row: pd.Series) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        nickname_columns = ['Nick name', 'Nickname', '–ù–∏–∫–Ω–µ–π–º']
        
        for col in nickname_columns:
            if col in row and pd.notna(row[col]):
                nickname = str(row[col]).strip()
                if nickname and nickname != '':
                    return nickname
        
        return ""
    
    def get_student_certificates(self, row: pd.Series) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        cert_columns = []
        
        for col in row.index:
            col_lower = str(col).lower()
            if any(keyword in col_lower for keyword in ['sertifikat', 'certificate', 'cert']):
                cert_columns.append(col)
        
        certificates = []
        for col in cert_columns:
            if pd.notna(row[col]):
                cert = str(row[col]).strip()
                if cert and cert.lower() not in ['', 'nan', 'none', 'null', '-', 'n/a']:
                    certificates.append(cert)
        
        return ', '.join(certificates) if certificates else ""
    
    def get_group_students(self, group: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã"""
        return self.students_data.get(group, pd.DataFrame())
    
    def get_statistics(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_students = 0
        passed_exam = 0
        failed_exam = 0
        
        group_stats = {}
        
        for group, df in self.students_data.items():
            if df.empty:
                continue
                
            group_total = len(df)
            total_students += group_total
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–¥–∞–≤—à–∏—Ö —ç–∫–∑–∞–º–µ–Ω (—É –∫–æ–≥–æ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã)
            group_passed = 0
            for _, row in df.iterrows():
                if self.has_certificate(row):
                    group_passed += 1
            
            group_failed = group_total - group_passed
            passed_exam += group_passed
            failed_exam += group_failed
            
            group_stats[group] = {
                'total': group_total,
                'passed': group_passed,
                'failed': group_failed
            }
        
        stats = f"üìä **{self.get_text(user_id, 'statistics')}**\n\n"
        stats += f"{self.get_text(user_id, 'total_students', count=total_students)}\n"
        stats += f"{self.get_text(user_id, 'passed_exam_count', count=passed_exam)}\n"
        stats += f"{self.get_text(user_id, 'failed_exam_count', count=failed_exam)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group, group_stat in group_stats.items():
            stats += f"**{group}:** {group_stat['total']} ({self.get_text(user_id, 'has_certificate')}: {group_stat['passed']})\n"
        
        return stats

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = StudentBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    welcome_text = bot.get_text(user_id, 'welcome')
    main_menu = bot.create_main_menu(user_id)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu,
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥ –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
    search_commands = [LANGUAGES[lang]['search_by_name'] for lang in LANGUAGES]
    show_group_commands = [LANGUAGES[lang]['show_group'] for lang in LANGUAGES]
    statistics_commands = [LANGUAGES[lang]['statistics'] for lang in LANGUAGES]
    help_commands = [LANGUAGES[lang]['help'] for lang in LANGUAGES]
    change_language_commands = [LANGUAGES[lang]['change_language'] for lang in LANGUAGES]
    
    if text in search_commands:
        await update.message.reply_text(bot.get_text(user_id, 'enter_name'))
        context.user_data['waiting_for'] = 'student_name'
        
    elif text in show_group_commands:
        keyboard = [
            [InlineKeyboardButton("D1", callback_data="group_D1"),
             InlineKeyboardButton("D2", callback_data="group_D2")],
            [InlineKeyboardButton("D3", callback_data="group_D3"),
             InlineKeyboardButton("D4", callback_data="group_D4")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            bot.get_text(user_id, 'choose_group'),
            reply_markup=reply_markup
        )
        
    elif text in statistics_commands:
        stats = bot.get_statistics(user_id)
        await update.message.reply_text(stats, parse_mode='Markdown')
        
    elif text in help_commands:
        help_text = bot.get_text(user_id, 'help_text')
        await update.message.reply_text(help_text)
        
    elif text in change_language_commands:
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
             InlineKeyboardButton("üá∫üáø O'zbek", callback_data="lang_uz")],
            [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            bot.get_text(user_id, 'select_language'),
            reply_markup=reply_markup
        )
        
    elif context.user_data.get('waiting_for') == 'student_name':
        # –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
        results = bot.search_student(text)
        
        if results:
            response = f"{bot.get_text(user_id, 'student_found')}\n\n"
            for i, student in enumerate(results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                response += f"{bot.format_student_info(student, user_id)}\n\n"
        else:
            response = bot.get_text(user_id, 'no_students_found')
        
        await update.message.reply_text(response, parse_mode='Markdown')
        context.user_data['waiting_for'] = None
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        results = bot.search_student(text)
        
        if results:
            response = f"{bot.get_text(user_id, 'student_found')}\n\n"
            for i, student in enumerate(results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                response += f"{bot.format_student_info(student, user_id)}\n\n"
            await update.message.reply_text(response, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu = bot.create_main_menu(user_id)
            await update.message.reply_text(
                bot.get_text(user_id, 'welcome'),
                reply_markup=main_menu,
                parse_mode='Markdown'
            )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    await query.answer()
    
    if data.startswith('group_'):
        group = data.split('_')[1]
        df = bot.get_group_students(group)
        
        if df.empty:
            await query.edit_message_text(bot.get_text(user_id, 'no_students_found'))
            return
        
        response = bot.get_text(user_id, 'students_in_group', group=group) + "\n\n"
        
        for index, row in df.iterrows():
            if index >= 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 20 —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
                response += f"\n... –∏ –µ—â–µ {len(df) - 20} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
                break
                
            name = bot.get_student_name(row)
            has_cert = bot.has_certificate(row)
            status = "‚úÖ" if has_cert else "‚ùå"
            
            response += f"{index + 1}. {status} {name}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton(bot.get_text(user_id, 'back_to_menu'), callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(response, reply_markup=reply_markup, parse_mode='Markdown')
        
    elif data.startswith('lang_'):
        lang = data.split('_')[1]
        bot.set_user_language(user_id, lang)
        
        await query.edit_message_text(bot.get_text(user_id, 'language_changed'))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_menu = bot.create_main_menu(user_id)
        await context.bot.send_message(
            chat_id=user_id,
            text=bot.get_text(user_id, 'welcome'),
            reply_markup=main_menu,
            parse_mode='Markdown'
        )
        
    elif data == 'back_to_menu':
        main_menu = bot.create_main_menu(user_id)
        await context.bot.send_message(
            chat_id=user_id,
            text=bot.get_text(user_id, 'welcome'),
            reply_markup=main_menu,
            parse_mode='Markdown'
        )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()
